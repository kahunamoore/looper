#pragma kernel ReduceBuffer
#pragma kernel CopyInputToBuffer
#pragma kernel InitParticleBuffer
#pragma kernel UpdateParticleBuffer

#define THREADS_PER_GROUP 512
#define PIXEL_THREADS_PER_GROUP 8

Texture2D<float4> _InputPositionTex;
Texture2D<float4> _InputColorTex;
RWStructuredBuffer<float4> _PositionBuffer;

RWStructuredBuffer<float4> _ParticlePositionBuffer;

RWStructuredBuffer<float4> _DestinationPositionBuffer;

uint _BufferSize;
uint2 _Resolution;
uint _FeedbackInv;
uint _FeedbackSize;

[numthreads(THREADS_PER_GROUP, 1, 1)]
void ReduceBuffer(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx * _FeedbackInv >= _BufferSize) return;

    _DestinationPositionBuffer[idx] = _PositionBuffer[idx * _FeedbackInv];
}

uint PackColor(float4 color)
{
    return (
        (((uint)(color.r * 255.0 + 0.5)) << 16) |
        (((uint)(color.g * 255.0 + 0.5)) << 8) |
        (uint)(color.b * 255.0 + 0.5)
    );
}

float4 UnpackColor(uint c)
{
    return float4(
        (float)((c >> 16) & 0xFF) / 255.0,
        (float)((c >> 8) & 0xFF) / 255.0,
        (float)(c & 0xFF) / 255.0,
        1.0
    );
}

uint morton2D_SplitBy2Bits(uint a)
{
    uint x = a;
    x = (x | x << 16) & 0x0000FFFF;
    x = (x | x << 8) & 0x00FF00FF;
    x = (x | x << 4) & 0x0F0F0F0F;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    return x;
}

uint morton_encode(uint2 a)
{
    return morton2D_SplitBy2Bits(a.x) | (morton2D_SplitBy2Bits(a.y) << 1);
}

[numthreads(PIXEL_THREADS_PER_GROUP, PIXEL_THREADS_PER_GROUP, 1)]
void CopyInputToBuffer(uint3 id : SV_DispatchThreadID)
{
    // uint2 p = id.xy * 2;
    uint2 p = id.xy;
    if (any(p >= _Resolution)) return;

    uint index = morton_encode(id.xy) + _FeedbackSize;

    uint color = PackColor(_InputColorTex[p]);

    _DestinationPositionBuffer[index] = float4(_InputPositionTex[p].xyz, asfloat(color));
}

// PRNG function
float nrand(float2 uv, float salt)
{
    uv += float2(salt, 1234.6789);
    float2 KI = float2(
        23.14069263277926, // e^pi (Gelfond's constant)
        2.665144142690225 // 2^sqrt(2) (Gelfondâ€“Schneider constant)
    );
    return frac(sin(dot(uv, KI)) * 43758.5453);
}

[numthreads(THREADS_PER_GROUP, 1, 1)]
void InitParticleBuffer(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _BufferSize) return;

    float r = frac(sin(((float)idx + 10.0) * 23.14069263277926) * 43758.5453);
    float life = frac(sin((float)idx * 23.14069263277926) * 43758.5453);

    _ParticlePositionBuffer[idx] = float4(0, 0, 0, 0);
}

[numthreads(THREADS_PER_GROUP, 1, 1)]
void UpdateParticleBuffer(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= _BufferSize) return;

    float4 p = _ParticlePositionBuffer[idx];

    p.w -= 0.1;
    if (p.w < -0.5)
    {
        p = float4(_PositionBuffer[idx].xyz, p.w + 1.0);
    }

    _ParticlePositionBuffer[idx] = p;
}
